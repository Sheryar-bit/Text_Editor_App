//         *********************************BY KHIZAR,BILAL,SHERYAR,YASIR************************************

package texteditorapp;

import java.awt.Color;
import java.awt.Desktop;
import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.print.PrinterException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JToolBar;
import javax.swing.undo.*;

public class App extends JFrame implements ActionListener {

    UndoManager undoredo = new UndoManager();
    Stack stack = new Stack();
    Color initialBackground;
    Color initialForeground;
    Font font;

    class Stack {

        class Node {

            String data;
            Node next;

            public Node(String data) {
                this.data = data;
                this.next = null;
            }
        }
        Node top;

        public Stack() {
            top = null;
        }

        void push(String x) {
            Node n = new Node(x);
            if (top == null) {
                top = n;
            } else {
                n.next = top;
                top = n;
            }
        }

        String peek() {
            String t = "";
            if (top == null) {
                return t;
            } else {
                t = top.data;
            }
            return t;
        }
    }

    public App() {
        
        initComponents();
        toolBar.setFloatable(false);
        this.initialBackground = TextArea.getBackground();
        this.initialForeground = TextArea.getForeground();
        font = new Font("Calibri", Font.PLAIN, 16);
        TextArea.setFont(font);
    };



    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jPopupMenu1 = new javax.swing.JPopupMenu();
        jPopupMenu2 = new javax.swing.JPopupMenu();
        jMenuItem4 = new javax.swing.JMenuItem();
        jToggleButton1 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        TextArea = new javax.swing.JTextArea();
        toolBar = new javax.swing.JToolBar();
        fileBtn = new javax.swing.JButton();
        openBtn = new javax.swing.JButton();
        saveBtn = new javax.swing.JButton();
        jSeparator10 = new javax.swing.JToolBar.Separator();
        cutBtn = new javax.swing.JButton();
        copyBtn = new javax.swing.JButton();
        pasteBtn = new javax.swing.JButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        bold = new javax.swing.JButton();
        italic = new javax.swing.JButton();
        boldItalic = new javax.swing.JButton();
        jToggleButton2 = new javax.swing.JToggleButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        file = new javax.swing.JMenu();
        newFile = new javax.swing.JMenuItem();
        newFileWindow = new javax.swing.JMenuItem();
        openFile = new javax.swing.JMenuItem();
        save = new javax.swing.JMenuItem();
        jSeparator6 = new javax.swing.JPopupMenu.Separator();
        print = new javax.swing.JMenuItem();
        jSeparator9 = new javax.swing.JPopupMenu.Separator();
        exit = new javax.swing.JMenuItem();
        edit = new javax.swing.JMenu();
        undo = new javax.swing.JMenuItem();
        redo = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        cut = new javax.swing.JMenuItem();
        copy = new javax.swing.JMenuItem();
        paste = new javax.swing.JMenuItem();
        delete = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        find = new javax.swing.JMenuItem();
        replace = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        selectAll = new javax.swing.JMenuItem();
        dateTime = new javax.swing.JMenuItem();
        format = new javax.swing.JMenu();
        fontSize = new javax.swing.JMenuItem();
        fontColor = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        theme = new javax.swing.JMenuItem();
        view = new javax.swing.JMenu();
        zoomIn = new javax.swing.JMenuItem();
        zoomOut = new javax.swing.JMenuItem();
        jSeparator8 = new javax.swing.JPopupMenu.Separator();
        defaultZoom = new javax.swing.JMenuItem();
        help = new javax.swing.JMenu();
        viewHelp = new javax.swing.JMenuItem();
        sendFeedback = new javax.swing.JMenuItem();
        jSeparator7 = new javax.swing.JPopupMenu.Separator();
        aboutUs = new javax.swing.JMenuItem();

        jMenuItem1.setText("jMenuItem1");

        jMenuItem2.setText("jMenuItem2");

        jMenuItem4.setText("jMenuItem4");

        jToggleButton1.setText("Theme");
        jToggleButton1.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton1.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton1ActionPerformed(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        TextArea.setColumns(20);
        TextArea.setRows(5);
        jScrollPane1.setViewportView(TextArea);

        toolBar.setRollover(true);

        fileBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/texteditorapp/new.JPG"))); // NOI18N
        fileBtn.setFocusable(false);
        fileBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        fileBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        fileBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileBtnActionPerformed(evt);
            }
        });
        toolBar.add(fileBtn);

        openBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/texteditorapp/open.JPG"))); // NOI18N
        openBtn.setFocusable(false);
        openBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        openBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        openBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openBtnActionPerformed(evt);
            }
        });
        toolBar.add(openBtn);

        saveBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/texteditorapp/save.JPG"))); // NOI18N
        saveBtn.setFocusable(false);
        saveBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        saveBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        toolBar.add(saveBtn);
        toolBar.add(jSeparator10);

        cutBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/texteditorapp/cut.JPG"))); // NOI18N
        cutBtn.setFocusable(false);
        cutBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        cutBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cutBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutBtnActionPerformed(evt);
            }
        });
        toolBar.add(cutBtn);

        copyBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/texteditorapp/copy.JPG"))); // NOI18N
        copyBtn.setFocusable(false);
        copyBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        copyBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        copyBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyBtnActionPerformed(evt);
            }
        });
        toolBar.add(copyBtn);

        pasteBtn.setIcon(new javax.swing.ImageIcon(getClass().getResource("/texteditorapp/paste.JPG"))); // NOI18N
        pasteBtn.setFocusable(false);
        pasteBtn.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pasteBtn.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        pasteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteBtnActionPerformed(evt);
            }
        });
        toolBar.add(pasteBtn);
        toolBar.add(jSeparator5);

        bold.setFont(new java.awt.Font("sansserif", 1, 18)); // NOI18N
        bold.setText("B");
        bold.setFocusable(false);
        bold.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        bold.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        bold.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boldActionPerformed(evt);
            }
        });
        toolBar.add(bold);

        italic.setFont(new java.awt.Font("sansserif", 2, 18)); // NOI18N
        italic.setText("I");
        italic.setFocusable(false);
        italic.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        italic.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        italic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                italicActionPerformed(evt);
            }
        });
        toolBar.add(italic);

        boldItalic.setFont(new java.awt.Font("sansserif", 3, 18)); // NOI18N
        boldItalic.setText("BI");
        boldItalic.setFocusable(false);
        boldItalic.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        boldItalic.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        boldItalic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                boldItalicActionPerformed(evt);
            }
        });
        toolBar.add(boldItalic);

        jToggleButton2.setText("Theme");
        jToggleButton2.setFocusable(false);
        jToggleButton2.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jToggleButton2.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToggleButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jToggleButton2ActionPerformed(evt);
            }
        });
        toolBar.add(jToggleButton2);

        jMenuBar1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));

        file.setText("File");

        newFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_DOWN_MASK));
        newFile.setText("New File");
        newFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileActionPerformed(evt);
            }
        });
        file.add(newFile);

        newFileWindow.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.ALT_DOWN_MASK | java.awt.event.InputEvent.CTRL_DOWN_MASK));
        newFileWindow.setText("New File Window");
        newFileWindow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newFileWindowActionPerformed(evt);
            }
        });
        file.add(newFileWindow);

        openFile.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.ALT_DOWN_MASK));
        openFile.setText("Open File");
        openFile.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openFileActionPerformed(evt);
            }
        });
        file.add(openFile);

        save.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.ALT_DOWN_MASK));
        save.setText("Save ");
        save.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveActionPerformed(evt);
            }
        });
        file.add(save);
        file.add(jSeparator6);

        print.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_P, java.awt.event.InputEvent.ALT_DOWN_MASK));
        print.setText("Print");
        print.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                printActionPerformed(evt);
            }
        });
        file.add(print);
        file.add(jSeparator9);

        exit.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_ESCAPE, 0));
        exit.setText("Exit");
        exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitActionPerformed(evt);
            }
        });
        file.add(exit);

        jMenuBar1.add(file);

        edit.setText("Edit");

        undo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Z, java.awt.event.InputEvent.ALT_DOWN_MASK));
        undo.setText("Undo");
        undo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        undo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                undoActionPerformed(evt);
            }
        });
        edit.add(undo);

        redo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_Y, java.awt.event.InputEvent.ALT_DOWN_MASK));
        redo.setText("Redo");
        redo.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        redo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                redoActionPerformed(evt);
            }
        });
        edit.add(redo);
        edit.add(jSeparator1);

        cut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_X, java.awt.event.InputEvent.ALT_DOWN_MASK));
        cut.setText("Cut");
        cut.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        cut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cutActionPerformed(evt);
            }
        });
        edit.add(cut);

        copy.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.ALT_DOWN_MASK));
        copy.setText("Copy");
        copy.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        copy.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                copyActionPerformed(evt);
            }
        });
        edit.add(copy);

        paste.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_V, java.awt.event.InputEvent.ALT_DOWN_MASK));
        paste.setText("Paste");
        paste.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        paste.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasteActionPerformed(evt);
            }
        });
        edit.add(paste);

        delete.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_DELETE, java.awt.event.InputEvent.ALT_DOWN_MASK));
        delete.setText("Delete");
        delete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteActionPerformed(evt);
            }
        });
        edit.add(delete);
        edit.add(jSeparator2);

        find.setText("Find");
        find.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                findActionPerformed(evt);
            }
        });
        edit.add(find);

        replace.setText("Replace");
        edit.add(replace);
        edit.add(jSeparator3);

        selectAll.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.ALT_DOWN_MASK));
        selectAll.setText("Select all");
        selectAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                selectAllActionPerformed(evt);
            }
        });
        edit.add(selectAll);

        dateTime.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_T, java.awt.event.InputEvent.ALT_DOWN_MASK));
        dateTime.setText("Date/Time");
        dateTime.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dateTimeActionPerformed(evt);
            }
        });
        edit.add(dateTime);

        jMenuBar1.add(edit);

        format.setText("Format");

        fontSize.setText("Font Size");
        fontSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontSizeActionPerformed(evt);
            }
        });
        format.add(fontSize);

        fontColor.setText("Font Color");
        fontColor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fontColorActionPerformed(evt);
            }
        });
        format.add(fontColor);
        format.add(jSeparator4);

        theme.setText("Theme");
        theme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                themeActionPerformed(evt);
            }
        });
        format.add(theme);

        jMenuBar1.add(format);

        view.setText("View");

        zoomIn.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_EQUALS, java.awt.event.InputEvent.ALT_DOWN_MASK));
        zoomIn.setText("Zoom In");
        zoomIn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomInActionPerformed(evt);
            }
        });
        view.add(zoomIn);

        zoomOut.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_MINUS, java.awt.event.InputEvent.ALT_DOWN_MASK));
        zoomOut.setText("Zoom Out");
        zoomOut.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zoomOutActionPerformed(evt);
            }
        });
        view.add(zoomOut);
        view.add(jSeparator8);

        defaultZoom.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_BACK_SPACE, java.awt.event.InputEvent.ALT_DOWN_MASK));
        defaultZoom.setText("Default Zoom");
        defaultZoom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                defaultZoomActionPerformed(evt);
            }
        });
        view.add(defaultZoom);

        jMenuBar1.add(view);

        help.setText("Help");

        viewHelp.setText("View Help");
        viewHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewHelpActionPerformed(evt);
            }
        });
        help.add(viewHelp);

        sendFeedback.setText("Send Feedback");
        sendFeedback.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFeedbackActionPerformed(evt);
            }
        });
        help.add(sendFeedback);
        help.add(jSeparator7);

        aboutUs.setText("About Us");
        aboutUs.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                aboutUsActionPerformed(evt);
            }
        });
        help.add(aboutUs);

        jMenuBar1.add(help);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 800, Short.MAX_VALUE)
            .addComponent(toolBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(toolBar, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void cutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutActionPerformed
        stack.push(TextArea.getSelectedText());
        TextArea.replaceSelection("");
    }//GEN-LAST:event_cutActionPerformed

    private void copyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyActionPerformed
        stack.push(TextArea.getSelectedText());
    }//GEN-LAST:event_copyActionPerformed

    private void pasteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteActionPerformed
        TextArea.replaceSelection(" " + stack.peek());
    }//GEN-LAST:event_pasteActionPerformed

    private void undoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_undoActionPerformed
        undoredo.undo();
    }//GEN-LAST:event_undoActionPerformed

    private void redoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_redoActionPerformed
        undoredo.redo();
    }//GEN-LAST:event_redoActionPerformed

    private void deleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteActionPerformed
        if (TextArea.getSelectedText().isEmpty() == false) {
            TextArea.replaceSelection("bilal shameel");
        }
    }//GEN-LAST:event_deleteActionPerformed

    private void findActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_findActionPerformed

    }//GEN-LAST:event_findActionPerformed

    private void zoomOutActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomOutActionPerformed
        float v = TextArea.getFont().getSize();
        if(v>6)
        TextArea.setFont(font.deriveFont(v - 5));
    }//GEN-LAST:event_zoomOutActionPerformed

    private void sendFeedbackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFeedbackActionPerformed
        String a = JOptionPane.showInputDialog(rootPane,"How was your experience?","Feedback",JOptionPane.NO_OPTION);
        if(a !=null || !"".equals(a)){
            JOptionPane.showMessageDialog(rootPane, "Thank you for your Feedback.","Thanks!",JOptionPane.PLAIN_MESSAGE);
        }
    }//GEN-LAST:event_sendFeedbackActionPerformed

    private void themeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_themeActionPerformed
        Color background = JColorChooser.showDialog(null, "Change Background", initialBackground);
        if (background != null ) {
            TextArea.setBackground(background);
        }
    }//GEN-LAST:event_themeActionPerformed

    private void exitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitActionPerformed
        int input;
        if (TextArea.getText().isBlank() == true) {
            input = JOptionPane.showConfirmDialog(null, "Are you sure you want to exit?");
            // 0=yes, 1=no, 2=cancel
            if (input == 0) {
                this.dispose();
            }
        } else {
            input = JOptionPane.showConfirmDialog(null, "Do you want to save?");
            // 0=yes, 1=no, 2=cancel
            switch (input) {
                case 0 -> {
                    this.saveActionPerformed(evt);
                    this.dispose();
                }
                case 1 -> {
                    this.dispose();
                }
                default -> {
                    return;
                }
            }
        }
    }//GEN-LAST:event_exitActionPerformed

    private void newFileWindowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileWindowActionPerformed
        App a = new App();
        a.setVisible(true);
        a.setVisible(true);
        a.setTitle("Gramerly");
        a.setSize(800, 600);
        a.setLocationRelativeTo(null);
    }//GEN-LAST:event_newFileWindowActionPerformed

    private void newFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newFileActionPerformed
        if (TextArea.getText().isBlank() == false) {
            int input = JOptionPane.showConfirmDialog(null, "Do you want to save?");
            // 0=yes, 1=no, 2=cancel
            switch (input) {
                case 0 -> {
                    this.saveActionPerformed(evt);
                    TextArea.setText("");
                    TextArea.setBackground(initialBackground);
                }
                case 1 -> {
                    TextArea.setText("");
                    TextArea.setBackground(initialBackground);
                }
                default -> {
                    return;
                }
            }
        } else {
            TextArea.setBackground(initialBackground);
        }
    }//GEN-LAST:event_newFileActionPerformed

    private void fileBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileBtnActionPerformed
        this.newFileActionPerformed(evt);
    }//GEN-LAST:event_fileBtnActionPerformed

    private void openBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openBtnActionPerformed
        this.openFileActionPerformed(evt);
    }//GEN-LAST:event_openBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        this.saveActionPerformed(evt);
    }//GEN-LAST:event_saveBtnActionPerformed

    private void cutBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cutBtnActionPerformed
        this.cutActionPerformed(evt);
    }//GEN-LAST:event_cutBtnActionPerformed

    private void copyBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_copyBtnActionPerformed
        this.copyActionPerformed(evt);
    }//GEN-LAST:event_copyBtnActionPerformed

    private void pasteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasteBtnActionPerformed
        this.pasteActionPerformed(evt);
    }//GEN-LAST:event_pasteBtnActionPerformed

    private void openFileActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openFileActionPerformed
        JFileChooser j = new JFileChooser("f:");

        // Invoke the showsOpenDialog function to show the save dialog
        int r = j.showOpenDialog(null);

        // If the user selects a file
        if (r == JFileChooser.APPROVE_OPTION) {
            // Set the label to the path of the selected directory
            File fi = new File(j.getSelectedFile().getAbsolutePath());

            try {
                // String
                String s1 = "", sl = "";

                // File reader
                FileReader fr = new FileReader(fi);

                // Buffered reader
                BufferedReader br = new BufferedReader(fr);

                // Initialize sl
                sl = br.readLine();

                // Take the input from the file
                while ((s1 = br.readLine()) != null) {
                    sl = sl + "\n" + s1;
                }

                // Set the text
                TextArea.setText(sl);
            } catch (IOException ev) {
                JOptionPane.showMessageDialog(TextArea, ev.getMessage());
            }
        } // If the user cancelled the operation
        else {
            JOptionPane.showMessageDialog(TextArea, "The user cancelled the operation.");
        }
    }//GEN-LAST:event_openFileActionPerformed

    private void saveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveActionPerformed
        JFileChooser j = new JFileChooser("f:");

        // Invoke the showsSaveDialog function to show the save dialog
        int r = j.showSaveDialog(null);

        if (r == JFileChooser.APPROVE_OPTION) {

            // Set the label to the path of the selected directory
            File fi = new File(j.getSelectedFile().getAbsolutePath());

            try {
                // Create a file writer
                FileWriter wr = new FileWriter(fi, false);

                // Write
                try ( // Create buffered writer to write
                         BufferedWriter w = new BufferedWriter(wr)) {
                    // Write
                    TextArea.write(w);
                }
            } catch (IOException ev) {
                JOptionPane.showMessageDialog(TextArea, ev.getMessage());
            }
        } // If the user cancelled the operation
        else
            JOptionPane.showMessageDialog(TextArea, "The user cancelled the operation.");
    }//GEN-LAST:event_saveActionPerformed

    private void printActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_printActionPerformed
        try {
            TextArea.print();
        } catch (PrinterException ex) {
            Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_printActionPerformed

    private void selectAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_selectAllActionPerformed
        TextArea.selectAll();
    }//GEN-LAST:event_selectAllActionPerformed

    private void dateTimeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dateTimeActionPerformed
        DateTimeFormatter dtf = DateTimeFormatter.ofPattern("dd/MM/yyyy HH:mm:ss");
        LocalDateTime now = LocalDateTime.now();
        TextArea.insert(dtf.format(now), TextArea.getCaretPosition());
    }//GEN-LAST:event_dateTimeActionPerformed

    private void fontSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontSizeActionPerformed
        int fo = TextArea.getFont().getSize();
        String s = JOptionPane.showInputDialog("Font Size:", fo);
        if (s != null) {
            float v = Float.parseFloat(s);
            TextArea.setFont(font.deriveFont(v));
        }

    }//GEN-LAST:event_fontSizeActionPerformed

    private void fontColorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fontColorActionPerformed
        Color fontC = JColorChooser.showDialog(null, "Change Font Color", initialBackground);
        if (font != null) {
            TextArea.setForeground(fontC);
        }
    }//GEN-LAST:event_fontColorActionPerformed

    private void zoomInActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zoomInActionPerformed
        float v = TextArea.getFont().getSize();
        if(v<100)
        TextArea.setFont(font.deriveFont(v + 5));
    }//GEN-LAST:event_zoomInActionPerformed

    private void defaultZoomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_defaultZoomActionPerformed
        TextArea.setFont(font.deriveFont(16));
    }//GEN-LAST:event_defaultZoomActionPerformed

    private void aboutUsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_aboutUsActionPerformed
        String url = "https://www.grammarly.com/?gclid=Cj0KCQiAnrOtBhDIARIsAFsSe51QqfP-PwrcONbVfymbznB_5CUKXOemNmeojTKQqk6na-LMzKfmQPEaAuEzEALw_wcB";
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();

            try {
                desktop.browse(new URI(url));
            } catch (URISyntaxException | IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                Runtime runtime = Runtime.getRuntime();
                runtime.exec("xdg-open " + url);
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_aboutUsActionPerformed

    private void viewHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewHelpActionPerformed
        String url = "https://support.apple.com/guide/textedit/welcome/mac";
        if (Desktop.isDesktopSupported()) {
            Desktop desktop = Desktop.getDesktop();

            try {
                desktop.browse(new URI(url));
            } catch (URISyntaxException | IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        } else {
            try {
                Runtime runtime = Runtime.getRuntime();
                runtime.exec("xdg-open " + url);
            } catch (IOException ex) {
                Logger.getLogger(App.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_viewHelpActionPerformed

    private void boldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boldActionPerformed
        if(TextArea.getFont().getStyle()!=Font.BOLD){
            TextArea.setFont(font.deriveFont(Font.BOLD));
        }
        else{
            TextArea.setFont(font.deriveFont(Font.PLAIN));
        }
    }//GEN-LAST:event_boldActionPerformed

    private void italicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_italicActionPerformed
        if(TextArea.getFont().getStyle()!=Font.ITALIC){
            TextArea.setFont(font.deriveFont(Font.ITALIC));
        }
        else{
            TextArea.setFont(font.deriveFont(Font.PLAIN));
        }
    }//GEN-LAST:event_italicActionPerformed

    private void boldItalicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_boldItalicActionPerformed
        if(TextArea.getFont().getStyle()!=Font.ITALIC | TextArea.getFont().getStyle()!=Font.BOLD){
            TextArea.setFont(font.deriveFont(Font.ITALIC|Font.BOLD));
        }
        else{
            TextArea.setFont(font.deriveFont(Font.PLAIN));
        }
    }//GEN-LAST:event_boldItalicActionPerformed

    private void jToggleButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton1ActionPerformed

    }//GEN-LAST:event_jToggleButton1ActionPerformed

    private void jToggleButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jToggleButton2ActionPerformed
      boolean isDarkTheme = TextArea.getBackground().equals(Color.BLACK);

    if (isDarkTheme) {
        // Switch to white mode
        TextArea.setBackground(initialBackground);
        TextArea.setForeground(initialForeground);
    } 
    else {
        // Switch to dark mode
        TextArea.setBackground(Color.BLACK);
        TextArea.setForeground(Color.WHITE);
    }
    }//GEN-LAST:event_jToggleButton2ActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            App editor = new App();
            editor.setVisible(true);
            editor.setTitle("Gramerly");
            editor.setSize(800, 600);
            editor.setLocationRelativeTo(null);

        });
    }

    @Override
    public void actionPerformed(ActionEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea TextArea;
    private javax.swing.JMenuItem aboutUs;
    private javax.swing.JButton bold;
    private javax.swing.JButton boldItalic;
    private javax.swing.JMenuItem copy;
    private javax.swing.JButton copyBtn;
    private javax.swing.JMenuItem cut;
    private javax.swing.JButton cutBtn;
    private javax.swing.JMenuItem dateTime;
    private javax.swing.JMenuItem defaultZoom;
    private javax.swing.JMenuItem delete;
    private javax.swing.JMenu edit;
    private javax.swing.JMenuItem exit;
    private javax.swing.JMenu file;
    private javax.swing.JButton fileBtn;
    private javax.swing.JMenuItem find;
    private javax.swing.JMenuItem fontColor;
    private javax.swing.JMenuItem fontSize;
    private javax.swing.JMenu format;
    private javax.swing.JMenu help;
    private javax.swing.JButton italic;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JPopupMenu jPopupMenu1;
    private javax.swing.JPopupMenu jPopupMenu2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator10;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JPopupMenu.Separator jSeparator6;
    private javax.swing.JPopupMenu.Separator jSeparator7;
    private javax.swing.JPopupMenu.Separator jSeparator8;
    private javax.swing.JPopupMenu.Separator jSeparator9;
    private javax.swing.JToggleButton jToggleButton1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JMenuItem newFile;
    private javax.swing.JMenuItem newFileWindow;
    private javax.swing.JButton openBtn;
    private javax.swing.JMenuItem openFile;
    private javax.swing.JMenuItem paste;
    private javax.swing.JButton pasteBtn;
    private javax.swing.JMenuItem print;
    private javax.swing.JMenuItem redo;
    private javax.swing.JMenuItem replace;
    private javax.swing.JMenuItem save;
    private javax.swing.JButton saveBtn;
    private javax.swing.JMenuItem selectAll;
    private javax.swing.JMenuItem sendFeedback;
    private javax.swing.JMenuItem theme;
    private javax.swing.JToolBar toolBar;
    private javax.swing.JMenuItem undo;
    private javax.swing.JMenu view;
    private javax.swing.JMenuItem viewHelp;
    private javax.swing.JMenuItem zoomIn;
    private javax.swing.JMenuItem zoomOut;
    // End of variables declaration//GEN-END:variables
}
